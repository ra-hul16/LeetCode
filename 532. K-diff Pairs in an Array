class Solution {
public:
    int BinarySearch(vector<int>& nums, int start, int tar){
        
        int end=nums.size()-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==tar){
                return mid;
            }
            else if(nums[mid]>tar){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return -1;
    }

    int findPairs(vector<int>& nums, int k) {
    //Binary search method
        sort(nums.begin(),nums.end());
        set<pair<int,int>>ans;
        for(int i=0;i<nums.size();i++){
            if(BinarySearch(nums,i+1,nums[i]+k)!=-1){
                ans.insert({nums[i],nums[i]+k});
            }
        }
        return ans.size();

    

    
    
    //Two Pointer Approach
    //     int n=nums.size();
    //     sort(nums.begin(),nums.end());
    //     set<pair<int,int>>ans;
    //     int i=0,j=1;
    //     while(j<n){
    //         if(nums[j]-nums[i]==k){
    //             ans.insert({nums[i],nums[j]});
    //             i++,j++;
    //         }
    //         else if(nums[j]-nums[i]>k){
    //             i++;

    //         }
    //         else{
    //             j++;
    //         }
    //         if(i==j) j++;
    //     }
    //     return ans.size();
        
     }
};
